{
  "name": "js-yaml",
  "version": "2.1.0",
  "description": "YAML 1.2 parser and serializer",
  "keywords": [
    "yaml",
    "parser",
    "serializer",
    "pyyaml"
  ],
  "homepage": "https://github.com/nodeca/js-yaml",
  "author": {
    "name": "Dervus Grim",
    "email": "dervus@lavabit.com"
  },
  "contributors": [
    {
      "name": "Aleksey V Zapparov",
      "email": "ixti@member.fsf.org",
      "url": "http://www.ixti.net/"
    },
    {
      "name": "Martin Grenfell",
      "email": "martin.grenfell@gmail.com",
      "url": "http://got-ravings.blogspot.com"
    }
  ],
  "bugs": {
    "url": "https://github.com/nodeca/js-yaml/issues"
  },
  "license": {
    "type": "MIT",
    "url": "https://github.com/nodeca/js-yaml/blob/master/LICENSE"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/nodeca/js-yaml.git"
  },
  "main": "./index.js",
  "bin": {
    "js-yaml": "bin/js-yaml.js"
  },
  "scripts": {
    "test": "make test"
  },
  "dependencies": {
    "argparse": "~ 0.1.11",
    "esprima": "~ 1.0.2"
  },
  "devDependencies": {
    "mocha": "*"
  },
  "engines": {
    "node": ">= 0.6.0"
  },
  "readme": "JS-YAML - YAML 1.2 parser and serializer for JavaScript\r\n=======================================================\r\n\r\n[![Build Status](https://secure.travis-ci.org/nodeca/js-yaml.png)](http://travis-ci.org/nodeca/js-yaml)\r\n\r\n[Online Demo](http://nodeca.github.com/js-yaml/)\r\n\r\n\r\nThis is an implementation of [YAML](http://yaml.org/), a human friendly data\r\nserialization language. Started as [PyYAML](http://pyyaml.org/) port, it was\r\ncompletely rewritten from scratch. Now it's very fast, and supports 1.2 spec.\r\n\r\n\r\nInstallation\r\n------------\r\n\r\n### YAML module for node.js\r\n\r\n```\r\nnpm install js-yaml\r\n```\r\n\r\n\r\n### CLI executable\r\n\r\nIf you want to inspect your YAML files from CLI, install js-yaml globally:\r\n\r\n```\r\nnpm install js-yaml -g\r\n```\r\n\r\n#### Usage\r\n\r\n```\r\nusage: js-yaml [-h] [-v] [-c] [-j] [-t] file\r\n\r\nPositional arguments:\r\n  file           File with YAML document(s)\r\n\r\nOptional arguments:\r\n  -h, --help     Show this help message and exit.\r\n  -v, --version  Show program's version number and exit.\r\n  -c, --compact  Display errors in compact mode\r\n  -j, --to-json  Output a non-funky boring JSON\r\n  -t, --trace    Show stack trace on error\r\n```\r\n\r\n\r\n### Bundled YAML library for browsers\r\n\r\n``` html\r\n<script src=\"js-yaml.min.js\"></script>\r\n<script type=\"text/javascript\">\r\nvar doc = jsyaml.load('greeting: hello\\nname: world');\r\n</script>\r\n```\r\n\r\nBrowser support was done mostly for online demo. If you find any errors - feel\r\nfree to send pull requests with fixes. Also note, that IE and other old browsers\r\nneeds [es5-shims](https://github.com/kriskowal/es5-shim) to operate.\r\n\r\n\r\nAPI\r\n---\r\n\r\nHere we cover the most 'useful' methods. If you need advanced details (creating\r\nyour own tags), see [wiki](https://github.com/nodeca/js-yaml/wiki) and\r\n[examples](https://github.com/nodeca/js-yaml/tree/master/examples) for more\r\ninfo.\r\n\r\nIn node.js JS-YAML automatically registers handlers for `.yml` and `.yaml`\r\nfiles. You can load them just with `require`. That's mostly equivalent to\r\ncalling `load()` on fetched content of a file. Just with one string!\r\n\r\n``` javascript\r\nrequire('js-yaml');\r\n\r\n// Get document, or throw exception on error\r\ntry {\r\n  var doc = require('/home/ixti/example.yml');\r\n  console.log(doc);\r\n} catch (e) {\r\n  console.log(e);\r\n}\r\n```\r\n\r\n\r\n### safeLoad (string [ , options ])\r\n\r\n**Recommended loading way.** Parses `string` as single YAML document. Returns a JavaScript\r\nobject or throws `YAMLException` on error. By default, does not support regexps,\r\nfunctions and undefined. This method is safe for untrusted data.\r\n\r\noptions:\r\n\r\n- `filename` _(default: null)_ - string to be used as a file path in\r\n  error/warning messages.\r\n- `strict` _(default - false)_ makes the loader to throw errors instead of\r\n  warnings.\r\n- `schema` _(default: `DEFAULT_FULL_SCHEMA`)_ - specifies a schema to use.\r\n  - `FAILSAFE_SCHEMA` - only strings, arrays and plain objects:\r\n    http://www.yaml.org/spec/1.2/spec.html#id2802346\r\n  - `JSON_SCHEMA` - all JSON-supported types:\r\n    http://www.yaml.org/spec/1.2/spec.html#id2803231\r\n  - `CORE_SCHEMA` - same as `JSON_SCHEMA`:\r\n    http://www.yaml.org/spec/1.2/spec.html#id2804923\r\n  - `DEFAULT_SAFE_SCHEMA` - all supported YAML types, without unsafe ones\r\n    (`!!js/undefined`, `!!js/regexp` and `!!js/function`):\r\n    http://yaml.org/type/\r\n  - `DEFAULT_FULL_SCHEMA` - all supported YAML types.\r\n\r\nNOTE: This function **does not** understand multi-document sources, it throws\r\nexception on those.\r\n\r\nNOTE: JS-YAML **does not** support schema-specific tag resolution restrictions.\r\nSo, JSON schema is not such strict as defined in the YAML specification.\r\nIt allows numbers in any notaion, use `Null` and `NULL` as `null`, etc.\r\nCore schema also has no such restrictions. It allows binary notation for integers.\r\n\r\n\r\n### load (string [ , options ])\r\n\r\n**Use with care with untrusted sources**. The same as `safeLoad()` but uses\r\n`DEFAULT_FULL_SCHEMA` by default - adds some JavaScript-specific types:\r\n`!!js/function`, `!!js/regexp` and `!!js/undefined`. For untrusted sources you\r\nmust additionally validate object structure, to avoid injections:\r\n\r\n``` javascript\r\nvar untrusted_code = '\"toString\": !<tag:yaml.org,2002:js/function> \"function (){very_evil_thing();}\"';\r\n\r\n// I'm just converting that string, what could possibly go wrong?\r\nrequire('js-yaml').load(untrusted_code) + ''\r\n```\r\n\r\n\r\n### safeLoadAll (string, iterator [ , options ])\r\n\r\nSame as `safeLoad()`, but understands multi-document sources and apply\r\n`iterator` to each document.\r\n\r\n``` javascript\r\nvar yaml = require('js-yaml');\r\n\r\nyaml.safeLoadAll(data, function (doc) {\r\n  console.log(doc);\r\n});\r\n```\r\n\r\n\r\n### loadAll (string, iterator [ , options ])\r\n\r\nSame as `safeLoadAll()` but uses `DEFAULT_FULL_SCHEMA` by default.\r\n\r\n\r\n### safeDump (object [ , options ])\r\n\r\nSerializes `object` as YAML document. Uses `DEFAULT_SAFE_SCHEMA`, so it will\r\nthrow exception if you try to dump regexps or functions. However, you can\r\ndisable exceptions by `skipInvalid` option.\r\n\r\noptions:\r\n\r\n- `indent` _(default: 2)_ - indentation width to use (in spaces).\r\n- `skipInvalid` _(default: false)_ - do not throw on invalid types (like function\r\n  in the safe schema) and skip pairs and single values with such types.\r\n- `flowLevel` (default: -1) - specifies level of nesting, when to switch from\r\n  block to flow style for collections. -1 means block style everwhere\r\n- `styles` - \"tag\" => \"style\" map. Each tag may have own set of styles.\r\n- `schema` _(default: `DEFAULT_SAFE_SCHEMA`)_ specifies a schema to use.\r\n\r\nstyles:\r\n\r\n``` none\r\n!!null\r\n  \"canonical\"   => \"~\"\r\n\r\n!!int\r\n  \"binary\"      => \"0b1\", \"0b101010\", \"0b1110001111010\"\r\n  \"octal\"       => \"01\", \"052\", \"016172\"\r\n  \"decimal\"     => \"1\", \"42\", \"7290\"\r\n  \"hexadecimal\" => \"0x1\", \"0x2A\", \"0x1C7A\"\r\n\r\n!!null, !!bool, !!float\r\n  \"lowercase\"   => \"null\", \"true\", \"false\", \".nan\", '.inf'\r\n  \"uppercase\"   => \"NULL\", \"TRUE\", \"FALSE\", \".NAN\", '.INF'\r\n  \"camelcase\"   => \"Null\", \"True\", \"False\", \".NaN\", '.Inf'\r\n```\r\n\r\nBy default, !!int uses `decimal`, and !!null, !!bool, !!float use `lowercase`.\r\n\r\n\r\n\r\n### dump (object [ , options ])\r\n\r\nSame as `safeDump()` but without limits (uses `DEFAULT_FULL_SCHEMA` by default).\r\n\r\n\r\nSupported YAML types\r\n--------------------\r\n\r\nThe list of standard YAML tags and corresponding JavaScipt types. See also\r\n[YAML tag discussion](http://pyyaml.org/wiki/YAMLTagDiscussion) and\r\n[YAML types repository](http://yaml.org/type/).\r\n\r\n```\r\n!!null ''                   # null\r\n!!bool 'yes'                # bool\r\n!!int '3...'                # number\r\n!!float '3.14...'           # number\r\n!!binary '...base64...'     # buffer\r\n!!timestamp 'YYYY-...'      # date\r\n!!omap [ ... ]              # array of key-value pairs\r\n!!pairs [ ... ]             # array or array pairs\r\n!!set { ... }               # array of objects with given keys and null values\r\n!!str '...'                 # string\r\n!!seq [ ... ]               # array\r\n!!map { ... }               # object\r\n```\r\n\r\n**JavaScript-specific tags**\r\n\r\n```\r\n!!js/regexp /pattern/gim            # RegExp\r\n!!js/undefined ''                   # Undefined\r\n!!js/function 'function () {...}'   # Function\r\n```\r\n\r\nCaveats\r\n-------\r\n\r\nNote, that you use arrays or objects as key in JS-YAML. JS do not allows objects\r\nor array as keys, and stringifies (by calling .toString method) them at the\r\nmoment of adding them.\r\n\r\n``` yaml\r\n---\r\n? [ foo, bar ]\r\n: - baz\r\n? { foo: bar }\r\n: - baz\r\n  - baz\r\n```\r\n\r\n``` javascript\r\n{ \"foo,bar\": [\"baz\"], \"[object Object]\": [\"baz\", \"baz\"] }\r\n```\r\n\r\nAlso, reading of properties on implicit block mapping keys is not supported yet.\r\nSo, the following YAML document cannot be loaded.\r\n\r\n``` yaml\r\n&anchor foo:\r\n  foo: bar\r\n  *anchor: duplicate key\r\n  baz: bat\r\n  *anchor: duplicate key\r\n```\r\n\r\n\r\nBreaking changes in 1.x.x -> 2.0.x\r\n----------------------------------\r\n\r\nIf your have not used __custom__ tags or loader classes - no changes needed. Just\r\nupgrade library and enjoy high parse speed.\r\n\r\nIn other case, you should rewrite your tag constructors and custom loader\r\nclasses, to conform new schema-based API. See\r\n[examples](https://github.com/nodeca/js-yaml/tree/master/examples) and\r\n[wiki](https://github.com/nodeca/js-yaml/wiki) for details.\r\nNote, that parser internals were completely rewritten.\r\n\r\n\r\nLicense\r\n-------\r\n\r\nView the [LICENSE](https://github.com/nodeca/js-yaml/blob/master/LICENSE) file\r\n(MIT).\r\n",
  "readmeFilename": "README.md",
  "_id": "js-yaml@2.1.0",
  "_shasum": "b31cd201dafdd7d2791e7806a1ed086d133cf8e3",
  "_resolved": "git://github.com/prose/js-yaml.git#c92bb78dc70829715231b2ad19ba3f627fd409a5",
  "_from": "js-yaml@git://github.com/prose/js-yaml.git"
}
