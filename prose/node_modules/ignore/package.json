{
  "name": "ignore",
  "version": "2.2.15",
  "description": "Ignore is a manager and filter for .gitignore rules.",
  "main": "index.js",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:kaelzhang/node-ignore.git"
  },
  "keywords": [
    "ignore",
    ".gitignore",
    "gitignore",
    "npmignore",
    "rules",
    "manager",
    "filter",
    "regexp",
    "regex",
    "regular-expression"
  ],
  "author": {
    "name": "kael"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/kaelzhang/node-ignore/issues"
  },
  "dependencies": {},
  "devDependencies": {
    "chai": "~1.7.2",
    "mocha": "~1.13.0"
  },
  "readme": "# ignore [![NPM version](https://badge.fury.io/js/ignore.png)](http://badge.fury.io/js/ignore) [![Build Status](https://travis-ci.org/kaelzhang/node-ignore.png?branch=master)](https://travis-ci.org/kaelzhang/node-ignore) [![Dependency Status](https://gemnasium.com/kaelzhang/node-ignore.png)](https://gemnasium.com/kaelzhang/node-ignore)\n\n`ignore` is a manager and filter which implemented in pure JavaScript according to the .gitignore [spec](http://git-scm.com/docs/gitignore).\n\nPay attention that [`minimatch`](https://www.npmjs.org/package/minimatch) does not work in the gitignore way. To filter filenames according to .gitignore file, I recommend this module.\n\n## Installation\n\n\tnpm install ignore --save\n\t\n## Usage\n\n```js\nvar ignore = require('ignore');\nvar ig = ignore(options).addPattern(['.abc/*', '!.abc/d/']);\n```\n\n### Filter the given paths\n\n```js\nvar paths = [\n    '.abc/a.js',    // filtered out\n    '.abc/d/e.js'   // included\n];\n\nig.filter(paths); // ['.abc/d/e.js']\n```\n\n### As the filter function\n\n```js\npaths.filter(ig.createFilter()); // ['.abc/d/e.js']\n```\n\n### With ignore files\n\nFor most cases, we'd better use only one ignore file. We could use `ignore.select` to select the first existing file.\n\n```js\nignore().addIgnoreFile(\n\tignore.select([\n\t\t'.xxxignore',\n\t\t'.gitignore',\n\t\t'.ignore'\n\t])\n);\n```\n\n## Why another ignore?\n\n1. `ignore` is a standalone module, and is much simpler so that it could easy work with other programs, unlike [isaacs](https://npmjs.org/~isaacs)'s [fstream-ignore](https://npmjs.org/package/fstream-ignore) which must work with the modules of the fstream family.\n\n2. `ignore` only contains utility methods to filter paths according to the specified ignore rules, so\n\n- `ignore` never try to find out ignore rules by traversing directories or fetching from git configurations.\n\n- `ignore` don't cares about sub-modules of git projects.\n\n3. Exactly according to [gitignore man page](http://git-scm.com/docs/gitignore), fixes some known matching issues of fstream-ignore, such as:\n\t- '`/*.js`' should only match '`a.js`', but not '`abc/a.js`'.\n\t- '`**/foo`' should match '`foo`' anywhere.\n\n\n\n## Methods\n\n### .addPattern(pattern)\n\nAdds a rule or several rules to the current manager.\n\n#### Returns `this`\n\n#### pattern `String|Array.<String>`\n\nThe ignore rule or a array of rules.\n\nNotice that a line starting with `'#'`(hash) is treated as a comment. Put a backslash (`'\\'`) in front of the first hash for patterns that begin with a hash, if you want to ignore a file with a hash at the beginning of the filename.\n\n```js\nignore().addPattern('#abc').filter(['#abc']); // ['abc']\nignore().addPattern('\\#abc').filter(['#abc']); // []\n```\n\n\n### .addIgnoreFile(path)\n\nAdds rules from a ignore file or several files \n\n#### Returns `this`\n\n#### Rule `String|Array.<String>`\n\n\n### .filter(paths)\n\nFilters the given array of pathnames, and returns the filtered array.\n\n#### paths `Array.<path>`\n\nThe array of paths to be filtered.\n\n*NOTICE* that each `path` here should be a relative path to the root of your repository. Suppose the dir structure is:\n\n```\n/path/to/your/repo\n    |-- a\n    |   |-- a.js\n    |\n    |-- .b\n    |\n    |-- .c\n         |-- .DS_store \n```\n\nThen the `paths` might be like this:\n\n```js\n[\n    'a/a.js'\n    '.b',\n    '.c/.DS_store'\n]\n```\n\nUsually, you could use [`glob`](http://npmjs.org/package/glob) to fetch the structure of the current directory:\n\n```js\nvar glob = require('glob');\nglob('**', function(err, files){\n    var filtered;\n\n    if ( err ) {\n        console.log(err);\n    } else {\n        filtered = ignore().addIgnoreFile('.gitignore').filter(files);\n        console.log(filtered);\n    }\n});\n```\n\n### .createFilter()\n\nCreates a filter function which could filter an array of paths with `Array.prototype.filter`.\n\n#### Returns `function(path)`\n\nThe filter function.\n\n\n## Constructor: ignore.Ignore\n\n```js\nnew ignore.Ignore(options);\nignore(options);\n```\n\n#### options.matchCase `boolean=false`\n\nBy default, all ignore rules will be treated as case-insensitive ones as well as the git does. \n\n#### options.twoGlobstars `boolean=false`\n\nBy defailt, `ignoreRules` will omit every pattern that includes '`**`' (two consecutive asterisks) which is not compatible cross operating systems, because the behavior of file .gitignore depends on the implementation of command `fnmatch` in shell.\n\nBy the way, Mac OS doesn't support '`**`'.\n\n#### options.ignore `Array.<String>`\n\nThe ignore rules to be added. Default to `['.git', '.svn', '.DS_Store']`\n\nIf you want those directories to be included, you could\n\n```js\nignore({\n\tignore: []\n});\n```\n\nYou can also use `.addPattern()` method to do this.\n\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/kaelzhang/node-ignore",
  "_id": "ignore@2.2.15",
  "_shasum": "6bd552185e0d1cd393b416603ee686879ec3bc3b",
  "_from": "ignore@~2.2.7",
  "_resolved": "https://registry.npmjs.org/ignore/-/ignore-2.2.15.tgz"
}
